drop policy "Allow user to view hosted events" on "public"."live_events";

create table "public"."user_image_uploads" (
    "id" bigint generated by default as identity not null,
    "author" uuid not null default auth.uid(),
    "media_path" text[] not null,
    "file_name" text not null,
    "created_at" timestamp with time zone not null default now()
);


alter table "public"."user_image_uploads" enable row level security;

CREATE UNIQUE INDEX user_image_uploads_pkey ON public.user_image_uploads USING btree (id);

alter table "public"."user_image_uploads" add constraint "user_image_uploads_pkey" PRIMARY KEY using index "user_image_uploads_pkey";

alter table "public"."user_image_uploads" add constraint "user_image_uploads_author_fkey" FOREIGN KEY (author) REFERENCES profiles(id) ON UPDATE CASCADE ON DELETE RESTRICT not valid;

alter table "public"."user_image_uploads" validate constraint "user_image_uploads_author_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.is_hosting(room_id uuid)
 RETURNS boolean
 LANGUAGE plpgsql
 SECURITY DEFINER
 SET search_path TO ''
AS $function$
BEGIN
  return exists(select 1 from public.live_games where id = room_id and host = auth.uid());
end;
$function$
;

CREATE OR REPLACE FUNCTION public.live_submit_answer(submitter_user_id uuid, room_id uuid, answer_content json)
 RETURNS void
 LANGUAGE plpgsql
 SECURITY DEFINER
 SET search_path TO ''
AS $function$
BEGIN 

if not exists (
  select 1
  from public.live_games
  where id = room_id
) then raise exception sqlstate '90304' using message = 'No room with the given ID was found.';
end if;
if not exists(
  select 1
  from public.live_events
  where game = room_id
    and event_type = 'user_join'
    and (payload#>>'{user_id}')::uuid = submitter_user_id
) then raise exception sqlstate '90305' using message = 'You are not a member of this room.';
end if;
insert into public.live_events (
    game,
    user_id,
    event_type,
    payload
  )
values (
    room_id,
    submitter_user_id,
    'user_answer',
    answer_content
  );
end;
$function$
;

CREATE OR REPLACE FUNCTION public.remove_loq_image(upload_id bigint)
 RETURNS void
 LANGUAGE plpgsql
 SECURITY DEFINER
 SET search_path TO ''
AS $function$
BEGIN
if auth.role() != 'authenticated' then raise exception sqlstate '90100' using message = 'You must be signed in to remove an image!';
end if;

if not exists (select 1 from public.user_image_uploads where id = upload_id and author = auth.uid())
then
  raise exception sqlstate '90105' using message = 'You cannot remove this image.';
end if;

delete from public.user_image_uploads where id = upload_id and author = auth.uid();
end;
$function$
;

CREATE OR REPLACE FUNCTION public.search_public_quizzes(page_number bigint, search_query_string text)
 RETURNS bigint[]
 LANGUAGE plpgsql
AS $function$
declare
match_ids int8[];
BEGIN

if search_query_string = '' then
select array_agg(id) into match_ids from (
  select id
  from public.quizzes
  where
    visibility = 'public' order by last_updated desc
  limit 10 offset page_number * 10
) as sub;
else
select array_agg(id) into match_ids from (
  select id
  from public.quizzes
  where
    visibility = 'public' and
    to_tsvector(title || ' ' || quiz_description) @@ to_tsquery(search_query_string)
  order by last_updated desc
  limit 10 offset page_number * 10
) as sub;

end if;
  RAISE NOTICE 'Page: %, Offset: %', page_number, page_number * 10;


  return match_ids;
end;
$function$
;

CREATE OR REPLACE FUNCTION public.upload_loq_image(user_file_name text)
 RETURNS json
 LANGUAGE plpgsql
 SECURITY DEFINER
 SET search_path TO ''
AS $function$
declare
recent_count int;
now_timestamp TIMESTAMP;
upload_cutoff TIMESTAMP;
user_media_path text[];
media_id uuid;
BEGIN
if auth.role() != 'authenticated' then raise exception sqlstate '90100' using message = 'You must be signed in to upload an image!';
end if;

now_timestamp := NOW();
upload_cutoff := now_timestamp - INTERVAL '10 minutes';
SELECT COUNT(*) into recent_count
FROM public.user_image_uploads
WHERE user_image_uploads.created_at > upload_cutoff
  and user_image_uploads.author = auth.uid();
if recent_count >= 10 then RAISE EXCEPTION SQLSTATE '90101' using message = 'You have uploaded 10 images in the past 10 minutes. Please wait a few minutes before uploading another loq.';
end if;

media_id := gen_random_uuid();

user_media_path := ARRAY['media', media_id::text];

if length(user_file_name) > 64 or user_file_name ~ '/[^A-Za-z0-9\-\_\.]/' then
raise exception sqlstate '90104' using message = 'Your file name does not meet the requirements.';
end if;

insert into public.user_image_uploads
(
  media_path,
  file_name
) values (
  user_media_path,
  user_file_name
);

return json_build_object(
  'media_path', user_media_path,
  'file_name', user_file_name
);

end;
$function$
;

grant delete on table "public"."user_image_uploads" to "anon";

grant insert on table "public"."user_image_uploads" to "anon";

grant references on table "public"."user_image_uploads" to "anon";

grant select on table "public"."user_image_uploads" to "anon";

grant trigger on table "public"."user_image_uploads" to "anon";

grant truncate on table "public"."user_image_uploads" to "anon";

grant update on table "public"."user_image_uploads" to "anon";

grant delete on table "public"."user_image_uploads" to "authenticated";

grant insert on table "public"."user_image_uploads" to "authenticated";

grant references on table "public"."user_image_uploads" to "authenticated";

grant select on table "public"."user_image_uploads" to "authenticated";

grant trigger on table "public"."user_image_uploads" to "authenticated";

grant truncate on table "public"."user_image_uploads" to "authenticated";

grant update on table "public"."user_image_uploads" to "authenticated";

grant delete on table "public"."user_image_uploads" to "service_role";

grant insert on table "public"."user_image_uploads" to "service_role";

grant references on table "public"."user_image_uploads" to "service_role";

grant select on table "public"."user_image_uploads" to "service_role";

grant trigger on table "public"."user_image_uploads" to "service_role";

grant truncate on table "public"."user_image_uploads" to "service_role";

grant update on table "public"."user_image_uploads" to "service_role";

create policy "Allow user to view hosted rooms"
on "public"."live_games"
as permissive
for select
to public
using ((host = auth.uid()));


create policy "Allow users to view own uploads"
on "public"."user_image_uploads"
as permissive
for select
to authenticated
using ((author = auth.uid()));


create policy "Allow user to view hosted events"
on "public"."live_events"
as permissive
for select
to public
using (is_hosting(game));



