// import { createContext, ReactNode, useContext, useState } from "react";
// import { useMutableState } from "../../functions/hooks";

// type NavigatorOptions<T extends PaginateProperties<P>, P extends string> = {
//   currentPage: keyof T;
//   setPage: (page: P, state: T[typeof page]) => void;
//   state: T[P];
//   updateState: ReturnType<typeof useMutableState<T[P]>>[1];
//   setState: ReturnType<typeof useMutableState<T[P]>>[2];
// };

// const PaginateNavigatorContext = createContext<
//   undefined | NavigatorOptions<{}, never>
// >(undefined);

// export type PaginateProperties<P extends string, T extends any = any> = {
//   [key in P]?: T;
// };

// export function PaginateContainer<
//   P extends string,
//   S extends PaginateProperties<P>,
//   T = {
//     [key in P]: ReactNode;
//   }
// >(props: {
//   pages: T;
//   defaultPage: P;
//   container?: (
//     Outlet: () => ReactNode,
//     options: NavigatorOptions<S, typeof props.defaultPage>
//   ) => ReactNode;
//   defaultState: S[typeof props.defaultPage];
// }) {
//   const ThisPaginateContext = PaginateNavigatorContext as React.Context<
//     NavigatorOptions<S, typeof props.defaultPage> | undefined
//   >;

//   const [page, setPage] = useState(props.defaultPage);
//   const [state, updateState, setState] = useMutableState<
//     S[typeof props.defaultPage]
//   >(props.defaultState);

//   const changePageAndState = (
//     newPage: P,
//     newState: S[typeof newPage]
//   ) => {
//     setPage(newPage);
//     setState(newState);
//   };

//   return (
//     <ThisPaginateContext
//       value={{
//         currentPage: page,
//         setPage: changePageAndState,
//         state,
//         updateState,
//         setState,
//       }}
//     >
//       {props.container
//         ? props.container(() => props.pages[page], {
//             currentPage: page,
//             setPage: changePageAndState,
//             state,
//             updateState,
//             setState,
//           })
//         : props.pages[page]}
//     </ThisPaginateContext>
//   );
// }

// export function usePaginate<S extends PaginateProperties, T extends keyof S>() {
//   const context = useContext(PaginateNavigatorContext);
//   if (context === undefined) throw new Error("No paginate context found.");
//   return context;
// }
